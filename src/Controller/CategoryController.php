<?php

namespace App\Controller;

use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Category;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;

class CategoryController extends Controller
{
    /**
     * @Route("/category", name="category")
     */
    public function index()
    {
        return $this->render('category/index.html.twig', [
            'controller_name' => 'CategoryController',
        ]);
    }

    /**
     * @Route("/category/add", name="addCategory")
     */
    public function addCategory(Request $request)
    {
        // just setup a fresh $task object (remove the dummy data)
        $category = new Category();

        $form = $this->createFormBuilder($category)
            ->add('title', TextType::class)
            ->add('isNSFW', CheckboxType::class, array('label' => 'Is this not safe for work ?', 'required' => false))
            ->add('image', FileType::class, array('label' => 'Image', 'required' => False))
            ->add('save', SubmitType::class, array('label' => 'Create Element'))
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            // $form->getData() holds the submitted values
            // but, the original `$task` variable has also been updated

            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $form["image"]->getData();

            if ($file == NULL)
            {
                $category = $form->getData();
                $category->setImage(NULL);
            }
            else
            {
                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                // moves the file to the directory where brochures are stored
                $file->move(
                    $this->getParameter('categoryImage_directory'),
                    $fileName
                );

                // updates the 'brochure' property to store the PDF file name
                // instead of its contents

                $category = $form->getData();
                $category->setImage($fileName);
            }
            // ... perform some action, such as saving the task to the database
            // for example, if Task is a Doctrine entity, save it!
            // $entityManager = $this->getDoctrine()->getManager();
            // $entityManager->persist($task);
            // $entityManager->flush();

            $entityManager = $this->getDoctrine()->getManager();

            // tell Doctrine you want to (eventually) save the Product (no queries yet)
            $entityManager->persist($category);

            // actually executes the queries (i.e. the INSERT query)
            $entityManager->flush();

            return new Response('Saved new element with id '.$category->getId());
        }

        return $this->render('category/addCategory.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    /**
    * @return string
    */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
    *   @Route("category/delete/{categoryToDelete}", name="app_delete_category");
    */
    public function deleteCategory($categoryToDelete)
    {
        $repository = $this->getDoctrine()->getRepository(Category::class);
        $entityManager = $this->getDoctrine()->getManager();
        $category = $repository->findOneBy(array("id" => $categoryToDelete));
        $conn = $this->getEntityManager()->getConnection();

        $sql = 'UPDATE ranking SET category_id = null WHERE category_id = :toDel';
        $stmt = $conn->prepare($sql);
        $stmt->execute(['catId' => $categoryToDelete]);

        $entityManager->remove($category);
        $entityManager->flush();
        return $this->redirectToRoute('app_admin');
    }
}
